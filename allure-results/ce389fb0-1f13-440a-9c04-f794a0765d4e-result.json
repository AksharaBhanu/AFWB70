{"name": "test_valid_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=111.0.5563.111)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0104DCE3]\n\t(No symbol) [0x00FE39D1]\n\t(No symbol) [0x00EF4DA8]\n\t(No symbol) [0x00EDD0D3]\n\t(No symbol) [0x00F3EA8B]\n\t(No symbol) [0x00F4D093]\n\t(No symbol) [0x00F3ACC6]\n\t(No symbol) [0x00F16F68]\n\t(No symbol) [0x00F180CD]\n\tGetHandleVerifier [0x012C3832+2506274]\n\tGetHandleVerifier [0x012F9794+2727300]\n\tGetHandleVerifier [0x012FE36C+2746716]\n\tGetHandleVerifier [0x010F6690+617600]\n\t(No symbol) [0x00FEC712]\n\t(No symbol) [0x00FF1FF8]\n\t(No symbol) [0x00FF20DB]\n\t(No symbol) [0x00FFC63B]\n\tBaseThreadInitThunk [0x76826BD9+25]\n\tRtlGetFullPathName_UEx [0x77778FD2+1218]\n\tRtlGetFullPathName_UEx [0x77778F9D+1165]", "trace": "self = <test_scripts.test_valid_login.TestValidLogin object at 0x000002872DCECA90>\n\n    @pytest.fixture(autouse=True)\n    def precondition(self):\n        print('Accessing property file')\n        pptobj = Properties()\n        pptobj.load(open('config.properties'))\n    \n        self.xl_path=pptobj['XL_PATH']\n        print('XL PATH',self.xl_path)\n    \n        usegrid=pptobj['USEGRID'].lower()\n        print('USE GRID',usegrid)\n    \n        gridurl=pptobj['GRIDURL']\n        print('Grid URL',gridurl)\n    \n        browser=pptobj['BROWSER'].lower()\n        print('browser',browser)\n    \n        appurl = pptobj['APPURL']\n        print('appurl',appurl)\n    \n        ito=pptobj['ITO']\n        print('ito',ito)\n    \n        eto=pptobj['ETO']\n        print('ETO',eto)\n    \n        if usegrid=='yes':\n           print('Executing in remote system')\n           if browser == 'chrome':\n               print('Open Chrome Browser')\n               self.driver = Remote(gridurl, DesiredCapabilities.CHROME)\n           elif browser == 'firefox':\n               print('Open Firefox Browser')\n               self.driver = Remote(gridurl,DesiredCapabilities.FIREFOX)\n           else:\n               print('Open Edge Browser')\n               self.driver = Remote(gridurl, DesiredCapabilities.EDGE)\n        else:\n            print('Executing in local system')\n            if browser=='chrome':\n                print('Open Chrome Browser')\n                self.driver = Chrome()\n            elif browser =='firefox':\n                print('Open Firefox Browser')\n                self.driver = Firefox()\n            else:\n                print('Open Edge Browser')\n                self.driver = Edge()\n    \n    \n        print('Enter the url',appurl)\n        self.driver.get(appurl)\n        print('maximize the browser')\n>       self.driver.maximize_window()\n\ngeneric\\base_setup.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\afwb70\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:592: in maximize_window\n    self.execute(command, None)\n..\\afwb70\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002872C32E890>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...unk [0x76826BD9+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77778FD2+1218]\\\\n\\\\tRtlGetFullPathName_UEx [0x77778F9D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=111.0.5563.111)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0104DCE3]\nE       \t(No symbol) [0x00FE39D1]\nE       \t(No symbol) [0x00EF4DA8]\nE       \t(No symbol) [0x00EDD0D3]\nE       \t(No symbol) [0x00F3EA8B]\nE       \t(No symbol) [0x00F4D093]\nE       \t(No symbol) [0x00F3ACC6]\nE       \t(No symbol) [0x00F16F68]\nE       \t(No symbol) [0x00F180CD]\nE       \tGetHandleVerifier [0x012C3832+2506274]\nE       \tGetHandleVerifier [0x012F9794+2727300]\nE       \tGetHandleVerifier [0x012FE36C+2746716]\nE       \tGetHandleVerifier [0x010F6690+617600]\nE       \t(No symbol) [0x00FEC712]\nE       \t(No symbol) [0x00FF1FF8]\nE       \t(No symbol) [0x00FF20DB]\nE       \t(No symbol) [0x00FFC63B]\nE       \tBaseThreadInitThunk [0x76826BD9+25]\nE       \tRtlGetFullPathName_UEx [0x77778FD2+1218]\nE       \tRtlGetFullPathName_UEx [0x77778F9D+1165]\n\n..\\afwb70\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchWindowException"}, "start": 1679926655319, "stop": 1679926655319, "uuid": "f02de596-76a0-438d-ab65-1bfd2eee4c67", "historyId": "ab84b7315ad1f8a783ebfebfd69e768d", "testCaseId": "1311271321bd346241d5e7f75a3a7f0a", "fullName": "test_scripts.test_valid_login.TestValidLogin#test_valid_login", "labels": [{"name": "tag", "value": "run(order=1)"}, {"name": "parentSuite", "value": "test_scripts"}, {"name": "suite", "value": "test_valid_login"}, {"name": "subSuite", "value": "TestValidLogin"}, {"name": "host", "value": "BHANU-LAPTOP"}, {"name": "thread", "value": "55776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_scripts.test_valid_login"}]}